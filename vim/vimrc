" Init Plug
if empty(glob('~/.local/share/nvim/site/autoload/plug.vim'))
   !curl -fLo ~/.local/share/nvim/site/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

source ~/.vim/plugins.vim

set backupskip=/tmp/*,/private/tmp/*
set clipboard=unnamed
set expandtab
set incsearch
set linebreak
set list
set mouse=a
set mousefocus
set nobackup
set noswapfile
set number
set numberwidth=5
set relativenumber
set shiftwidth=2
set smartcase
set softtabstop=2
set splitbelow splitright
set tabstop=2
set winwidth=79 winheight=5 winminheight=5 winheight=999
set textwidth=80
set colorcolumn=+1
set termguicolors
set wildmode=longest:full,full
if exists("+spelllang")
  set spelllang=en_us
endif

" automatically create undodir if it doesn't exist
set undodir=~/.cache/vim/undo//
if !isdirectory(expand(&undodir))
  call mkdir(expand(&undodir), "p")
endif

command! -bang W w
command! -bang Q q
command! -bang Qa qa
command! -bang Wq wq
command! -bang Wqa wqa

" REST OF FILE CONTAINS MAPPINGS
let mapleader = " "

set pastetoggle=<F9>

"" qq to record Q to replay
nmap Q @q
nnoremap Q @q

"" Quickfix
nnoremap ]q :cnext<cr>zz
nnoremap [q :cprev<cr>zz
nnoremap ]l :lnext<cr>zz
nnoremap [l :lprev<cr>zz

"" Moving lines
nnoremap <silent> <A-Up> :move-2<cr>
nnoremap <silent> <A-Down> :move+<cr>
nnoremap <silent> <A-Left> <<
nnoremap <silent> <A-Right> >>
xnoremap <silent> <A-Up> :move-2<cr>gv
xnoremap <silent> <A-Down> :move'>+<cr>gv
xnoremap <silent> <A-Left> <gv
xnoremap <silent> <A-Right> >gv
xnoremap < <gv
xnoremap > >gv

" <leader>c Close quickfix
nnoremap <leader>c :cclose<bar>lclose<cr>

" Vertical split to alternative file
map <C-w>t <C-w>v<C-w>l:A<CR>
nmap <Leader>- :sp<CR>
nmap <Leader>= :vsp<CR>

" Navigate splits
map <C-h> <C-w>h
map <C-l> <C-w>l
map <C-k> <C-w>k
map <C-j> <C-w>j

" ZenCoding
let g:user_emmet_expandabbr_key = '<c-space>'

" open files in directory of current file
cnoremap %% <c-r>=expand('%:h').'/'<cr>
map <leader>e :edit %%

" Ayu theme
" let ayucolor="light"
let ayucolor="mirage"
" let ayucolor="dark"
colorscheme ayu
" IndentLine
let g:indentLine_char = '▏'
let g:indentLine_first_char = '▏'
let g:indentLine_showFirstIndentLevel = 1
let g:indentLine_setColors = 0

" Airline
let g:airline_section_b = ""
let g:airline_skip_empty_sections = 1

" Recursice remove
let g:netrw_localrmdir = "rm -rf"
let g:netrw_bufsettings = "noma namod nu rnu nobl nowrap ro"

nnoremap <F5> :GundoToggle<CR>
let g:gundo_width = 60
let g:gundo_preview_height = 60
let g:gundo_right = 1

" Ag command line option
let g:ag_prg="ag --vimgrep --smart-case"

let g:deoplete#enable_at_startup = 1
let g:neosnippet#enable_completed_snippet = 1

" Prettier
let g:prettier#exec_cmd_async = 1
let g:prettier#autoformat = 0
let g:prettier#autoformat = 0
autocmd BufWritePre *.js,*.jsx,*.mjs,*.ts,*.tsx,*.css,*.less,*.scss,*.json,*.graphql,*.md,*.vue PrettierAsync

" Languages
set hidden

let g:LanguageClient_serverCommands = {
    \ 'javascript': ['flow', 'lsp'],
    \ 'javascript.jsx': ['flow', 'lsp'],
    \ 'typescript': ['javascript-typescript-stdio'],
    \ 'elixir': ['~/.elixir-ls/language_server.sh'],
    \ 'python': ['pyls']
    \ }
let g:LanguageClient_rootMarkers = {
      \ 'javascript': ['package.json'],
      \ 'javascript.jsx': ['package.json'],
      \}

nnoremap <F4> :call LanguageClient_contextMenu()<CR>
" Or map each action separately
nnoremap <silent> K :call LanguageClient#textDocument_hover()<CR>
nnoremap <silent> gd :call LanguageClient#textDocument_definition()<CR>
nnoremap <silent> <F2> :call LanguageClient#textDocument_rename()<CR>
nnoremap <Leader>s :%s/\<<C-r><C-w>\>/


" FZF
let $FZF_DEFAULT_OPTS .= ' --inline-info'
nnoremap <silent> <Leader>P :Commands<CR>
nnoremap <silent> <Leader>p :GFiles<CR>
nnoremap <silent> <Leader>o :Files<CR>
" Hide statusline of terminal buffer
autocmd! FileType fzf
autocmd  FileType fzf set laststatus=0 noshowmode noruler
  \| autocmd BufLeave <buffer> set laststatus=2 showmode ruler

let g:fzf_layout = { 'window': 'enew' }
let g:fzf_layout = { 'window': '-tabnew' }
let g:fzf_layout = { 'window': '10split enew' }
let g:fzf_colors =
	\ { 
	\ 'fg':      ['fg', 'Normal'],
  \ 'bg':      ['bg', 'Normal'],
  \ 'hl':      ['fg', 'Comment'],
  \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
  \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
  \ 'hl+':     ['fg', 'Statement'],
  \ 'info':    ['fg', 'PreProc'],
  \ 'border':  ['fg', 'Ignore'],
  \ 'prompt':  ['fg', 'Conditional'],
  \ 'pointer': ['fg', 'Exception'],
  \ 'marker':  ['fg', 'Keyword'],
  \ 'spinner': ['fg', 'Label'],
  \ 'header':  ['fg', 'Comment'] }

" Minisnip
let g:minisnip_trigger = '<c-e>'

" Allow per project .nvimrc file to load
set exrc
set secure

